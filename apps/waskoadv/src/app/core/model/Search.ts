// Generated by https://quicktype.io

type EntityType = Album | Artist // | Podcast 

type t = EntityType['type']
type ContentType = `${EntityType['type']}s`

export type SearchResponse<T extends EntityType> = {
    // [album + 's']
    // [key in T['type']]: PagingObject<T>
    [key in `${T['type']}s`]: PagingObject<T>
}

 // https://github.com/colinhacks/zod

export const isSearchResponse = <T extends EntityType>(resp: any, type: `${T['type']}s`): resp is SearchResponse<T> => {
    return resp[type]?.items instanceof Array
}

export function validateSearchResponse<T extends EntityType>(type: `${T['type']}s`, resp: any): asserts resp is SearchResponse<T> {
    if (!isSearchResponse(resp, type)) {
        throw 'Invalid response'
    }
}

export function validateAlbumsSearchResponse(resp: any): asserts resp is SearchResponse<Album> {
    if (!isSearchResponse(resp, 'albums')) {
        throw 'Invalid response'
    }
}

export interface AlbumsSearchResponse {
    albums: PagingObject<Album>
}
export interface ArtistsSearchResponse {
    artists: PagingObject<Artist>
}

export interface AlbumsResponse {
    albums: Album[];
}

export interface Entity {
    id: string;
    name: string;
}

// Generated by https://quicktype.io

export interface SpotifyError {
    error: {
        status: number;
        message: string;
    };
}

export const isSpotifyError = (error: SpotifyError | any): error is SpotifyError => {
    // return error.error?.error?.message
    return 'error' in error && 'message' in error.error
}



// https://developer.spotify.com/documentation/web-api/reference/#object-albumobject
export interface Album extends Entity {
    album_type: string;
    artists: Artist[];
    available_markets: string[];
    copyrights: Copyright[];
    external_ids: ExternalIDS;
    external_urls: ExternalUrls;
    genres: any[];
    href: string;
    images: Image[];
    popularity: number;
    release_date: Date;
    release_date_precision: string;
    tracks: PagingObject<Track>;
    type: 'album';
    uri: string;
}

// export interface Album{
//     placki: 123
// }
// const album:Album = {
//     placki:123 
// }
// export type Album = {} // Duplicate identifier 'Album'.

type MaybeString = string | undefined
type MaybeDate = Array<any> & Date

interface Dictionary2 {
    [key: string]: string
}

type Dictionary = {
    [key: string]: string
    // [key: Playlist['id']]: Playlist
}


const dict: Dictionary = {
    'asd': '123',
    '123asd': '123'
    // '123': 123 // Type 'number' is not assignable to type 'string'
}
export interface MockAlbum {
    id: Album['id'];
    name: Album['name'];
    images: Image[];
    type: 'album';
    // enableVisualFireworks: boolean
}

// type keys = 'id' | 'name' | 'images'
type keys = keyof Album

export type MockAlbum2 = {
    [key in keys]: Album[key]
    // [key in 'id' | 'name' | 'images']: Album[key]
}

export type PartialAlbum = {
    [key in keyof Album]?: Album[key]
}
// export type Pick<T extends Entity, K extends "id" | 'name' > = {
// export type Pick<T extends Entity, K extends keyof Entity > = {
export type Pick<T, K extends keyof T> = {
    [key in K]: T[key]
}

// export type Partial<T> = {
//     [key in keyof T]?: T[key] 
// }
//  > node_modules\typescript\lib\lib.es5.d.ts

export type MockAlbum3 = Partial<Album>
export type MockAlbum4 = Readonly<Partial<Pick<Album, 'id' | 'name'>>>
export type MockAlbum5 = Omit<Album, 'images' | 'id' | 'name'>

export interface AlbumView extends Entity {
    images: Image[];
    type: 'album';
    // enableVisualFireworks: boolean
}


export type MockAlbum6 = Pick<Album, 'id' | 'name' | 'type'> & {
    // images: { url: string; }[]
    // images: { url: Album['images'][0]['url']}
    // images: { url: Album['images'][number]['url']}[]
    images: Pick<Album['images'][number], 'url'>[]
}


export interface Artist {
    external_urls: ExternalUrls;
    href: string;
    id: string;
    name: string;
    type: 'artist';
    uri: string;
}

export interface ExternalUrls {
    spotify: string;
}

export interface Copyright {
    text: string;
    type: string;
}

export interface ExternalIDS {
    upc: string;
}

export interface Image {
    height: number;
    url: string;
    width: number;
}

export interface PagingObject<T> {
    href: string;
    items: T[];
    limit: number;
    next: null;
    offset: number;
    previous: null;
    total: number;
}

export interface Track {
    artists: Artist[];
    available_markets: string[];
    disc_number: number;
    duration_ms: number;
    explicit: boolean;
    external_urls: ExternalUrls;
    href: string;
    id: string;
    name: string;
    preview_url: string;
    track_number: number;
    type: 'track';
    uri: string;
}